openapi: 3.0.3
info:
  title: API Event Planner
  version: 1.0.0
servers:
  - description: API
    url: 'http://0.0.0.0/api'

tags:
  - name: auth
    description: "api auth"
  - name: users
    description: "api users"
  - name: locations
    description: "api locations"
  - name: children
    description: "api children"
  - name: events
    description: "api events"

paths:
  '/auth/register/':
    post:
      tags:
        - auth
      summary: "Registration"
      requestBody:
        $ref: '#/components/requestBodies/RegistrationRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Registration201'
        '400':
          $ref: '#/components/responses/Registration400'

  '/auth/token/':
    post:
      tags:
        - auth
      summary: "Get jwt tokens pair"
      requestBody:
        $ref: '#/components/requestBodies/TokenObtainRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TokenObtain200'
        '400':
          $ref: '#/components/responses/TokenObtain400'

  '/auth/token/refresh/':
    post:
      tags:
        - auth
      summary: "Refresh tokens pair"
      requestBody:
        $ref: '#/components/requestBodies/TokenRefreshRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TokenObtain200'
        '400':
          $ref: '#/components/responses/TokenRefresh400'

  '/users/profile':
    get:
      tags:
        - users
      summary: "User profile"
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/UsersMe200'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/users/children/':
    get:
      tags:
        - children
      summary: "Get children"
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/ChildList200'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - children
      summary: "Create child"
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/ChildCreate'
      responses:
        '200':
          $ref: '#/components/responses/ChildCreate200'
        '400':
          $ref: '#/components/responses/ChildCreate400'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/users/children/{child_id}/':
    put:
      tags:
        - children
      summary: "Update child"
      parameters:
        - name: child_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/ChildCreate'
      responses:
        '200':
          $ref: '#/components/responses/ChildCreate200'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - children
      summary: "Delete child"
      parameters:
        - name: child_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: 'Success delete'
        '404':
          $ref: '#/components/responses/NotFound'


  '/locations/':
    get:
      tags:
        - locations
      summary: "Get locations"
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/LocationList200'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - locations
      summary: "Create location"
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/CreateLocation'
      responses:
        '201':
          $ref: '#/components/responses/LocationCreate201'
        '400':
          $ref: '#/components/responses/LocationCreate400'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/locations/{location_id}':
    put:
      tags:
        - locations
      summary: "Update location"
      parameters:
        - name: location_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/CreateLocation'
      responses:
        '200':
          $ref: '#/components/responses/LocationCreate201'
        '400':
          $ref: '#/components/responses/LocationCreate400'
        '401':
          $ref: '#/components/responses/Unauthorized'

    patch:
      tags:
        - locations
      summary: "Partial update location"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: location_id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        $ref: '#/components/requestBodies/CreateLocation'
      responses:
        '200':
          $ref: '#/components/responses/LocationCreate201'
        '400':
          $ref: '#/components/responses/LocationCreate400'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/events/':
    get:
      tags:
        - events
      summary: "Get events"
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: date
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: month
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: child
          schema:
            type: integer
          required: false
      responses:
        '200':
          $ref: '#/components/responses/EventList200'
        '400':
          $ref: '#/components/responses/EventList400'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - events
      summary: "Create one time event"
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/CreateOneTimeEvent'
      responses:
        '201':
          $ref: '#/components/responses/OneTimeEventCreate201'
        '400':
          $ref: '#/components/responses/OneTimeEventCreate400'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/events/schedule/':
    post:
      tags:
        - events
      summary: "Create event with schedule"
      security:
        - bearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/CreateEventWithSchedule'
      responses:
        '201':
          description: "Created"
        '400':
          $ref: '#/components/responses/EventWithScheduleCreate400'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/events/{event_id}':
    delete:
      tags:
        - events
      summary: "Delete event"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: event_id
          in: path
          schema:
            type: number
          required: true
      responses:
        '204':
          description: 'Success delete'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ChildRetrieve:
      type: object
      properties:
        id:
          type: number
        name:
          type: string

    LocationRetrieve:
      type: object
      properties:
        id:
          type: number
        address:
          type: string
        latitude:
          type: number
        longitude:
          type: number

    UserSummary:
      type: object
      properties:
        username:
          type: string

    UserProfile:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/ChildRetrieve'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/LocationRetrieve'

    EventRetrieve:
      type: object
      properties:
        id:
          type: number
        child:
          $ref: "#/components/schemas/ChildRetrieve"
        location:
          $ref: "#/components/schemas/LocationRetrieve"
        owner:
          $ref: "#/components/schemas/UserSummary"
        main_name:
          type: string
        event_date:
          type: string
          format: date
        event_time_start:
          type: string
          format: time
        event_time_finish:
          type: string
          format: time
        event_description:
          type: string

    DaySchedule:
      type: object
      properties:
        day_of_week:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
        time_start:
          type: string
          format: 'HH:MM'
        time_finish:
          type: string
          format: 'HH:MM'

  requestBodies:
    RegistrationRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
      required: true

    TokenObtainRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      required: true

    TokenRefreshRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              refresh:
                type: string
      required: true

    ChildCreate:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
      required: true

    CreateOneTimeEvent:
      content:
        application/json:
          schema:
            type: object
            properties:
              main_name:
                type: string
              child:
                type: integer
              location:
                type: integer
              event_date:
                type: string
                format: date
              event_time_start:
                type: string
                format: time
              event_time_finish:
                type: string
                format: time
              event_description:
                type: string

    CreateEventWithSchedule:
      content:
        application/json:
          schema:
            type: object
            properties:
              main_name:
                type: string
              child:
                type: integer
              location:
                type: integer
              event_description:
                type: string
              schedule:
                type: object
                properties:
                  days:
                    type: array
                    items:
                      $ref: '#/components/schemas/DaySchedule'
                  date_start:
                    type: string
                    format: date
                  date_finish:
                    type: string
                    format: date

    CreateLocation:
      content:
        application/json:
          schema:
            type: object
            properties:
              address:
                type: string
              latitude:
                type: number
              longitude:
                type: number

  responses:
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "Учетные данные не были предоставлены."

    NotFound:
      description: "Not Found"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "Страница не найдена."

    Registration201:
      description: "Created"
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string

    Registration400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: array
                items:
                  type: string
                  example: "Пользователь с таким Никнейм уже существует."
              emain:
                type: array
                items:
                  type: string
                  example: "Пользователь с таким Email уже существует."

    TokenObtain200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              refresh:
                type: string
                description: "refresh token"
              access:
                type: string
                description: "access token"

    TokenObtain400:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "No active account found with the given credentials"

    TokenRefresh400:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "Token is invalid or expired"
              code:
                type: string
                example: "token_not_valid"

    UsersMe200:
      description: "Success"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProfile'

    ChildList200:
      description: "Success"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChildRetrieve'

    ChildCreate200:
      description: "Success"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChildRetrieve'

    ChildCreate400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: array
                items:
                  type: string
                  example: "Убедитесь, что это значение содержит не более 55 символов."

    EventList200:
      description: "Success"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EventRetrieve'

    LocationList200:
      description: "Success"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LocationRetrieve'

    EventList400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              date:
                type: array
                items:
                  type: string
                  example: "Введите правильную дату."
              month:
                type: array
                items:
                  type: string
                  example: "Введите правильную дату."

    OneTimeEventCreate201:
      description: "Created"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventRetrieve'

    OneTimeEventCreate400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              main_name:
                type: array
                items:
                  type: string
                  example: "Убедитесь, что это значение содержит не более 55 символов."
              child:
                type: array
                items:
                  type: string
                  example: "У пользователя нет такого ребёнка"
              event_date:
                type: array
                items:
                  type: string
                  example: "Неправильный формат date. Используйте один из этих форматов: YYYY-MM-DD."
              event_time_start:
                type: array
                items:
                  type: string
                  example: "Неправильный формат времени. Используйте один из этих форматов: hh:mm[:ss[.uuuuuu]]."
              event_time_finish:
                type: array
                items:
                  type: string
                  example: "Неправильный формат времени. Используйте один из этих форматов: hh:mm[:ss[.uuuuuu]]."
              event_description:
                type: array
                items:
                  type: string
                  example: "Убедитесь, что это значение содержит не более 255 символов."
              location:
                type: array
                items:
                  type: string
                  example: "У пользователя нет такого адреса"

    EventWithScheduleCreate400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              main_name:
                type: array
                items:
                  type: string
                  example: "Убедитесь, что это значение содержит не более 55 символов."
              child:
                type: array
                items:
                  type: string
                  example: "У пользователя нет такого ребёнка"
              schedule:
                type: object
                properties:
                  days:
                    type: array
                    items:
                      type: object
                      properties:
                        day_of_week:
                          type: array
                          items:
                            type: string
                            example: "Значения 234223 нет среди допустимых вариантов."
                        time_start:
                          type: array
                          items:
                            type: string
                            example: "Неправильный формат времени. Используйте один из этих форматов: hh:mm[:ss[.uuuuuu]]."
                        time_finish:
                          type: array
                          items:
                            type: string
                            example: "Неправильный формат времени. Используйте один из этих форматов: hh:mm[:ss[.uuuuuu]]."
                  date_start:
                    type: array
                    items:
                      type: string
                      example: "Неправильный формат date. Используйте один из этих форматов: YYYY-MM-DD."
                  date_finish:
                    type: array
                    items:
                      type: string
                      example: "Неправильный формат date. Используйте один из этих форматов: YYYY-MM-DD."
              event_description:
                type: array
                items:
                  type: string
                  example: "Убедитесь, что это значение содержит не более 255 символов."
              location:
                type: array
                items:
                  type: string
                  example: "У пользователя нет такого адреса"

    LocationCreate201:
      description: "Created"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationRetrieve'

    LocationCreate400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              address:
                type: array
                items:
                  type: string
                  example: "Убедитесь, что это значение содержит не более 55 символов."
              latitude:
                type: array
                items:
                  type: string
                  example: "Убедитесь, что это значение больше либо равно -90."
              longitude:
                type: array
                items:
                  type: string
                  example:  "Убедитесь, что это значение меньше либо равно 180."